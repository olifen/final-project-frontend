{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/game.js","js/controllers/games.js","js/directives/googleMap.js","js/directives/googlePlace.js","js/controllers/main.js","js/router.js","js/models/user.js","js/controllers/users.js","js/models/venue.js","js/controllers/venues.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Game","$resource","id","update","method","GamesIndexController","gamesIndex","all","query","GamesShowController","deleteGame","gamesShow","game","$remove","delete","get","params","GamesNewController","Venue","create","save","gamesNew","venues","GamesEditController","gamesEdit","$update","googleMap","$window","restrict","replace","template","scope","link","$scope","element","clearMarkers","markers","forEach","marker","setMap","map","google","maps","Map","center","lat","lng","zoom","$watch","$resolved","venue","Marker","position","animation","Animation","DROP","addListener","push","googleplace","require","attrs","model","options","types","componentRestrictions","country","autocomplete","places","Autocomplete","place","getPlace","latLng","geometry","location","toJSON","postcode","formatted_address","console","log","$setViewValue","val","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","VenuesIndexController","venuesIndex","VenuesShowController","deleteVenue","venuesShow","VenuesNewController","venuesNew","VenuesEditController","venuesEdit","angular","module","constant","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n//\n// app.controller('MyController', function(NgMap) {\n//   NgMap.getMap().then(function(map) {\n//     console.log(map.getCenter());\n//     console.log('markers', map.markers);\n//     console.log('shapes', map.shapes);\n//   });\n// });\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('gamesIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Game', Game);\n\nGame.$inject = ['$resource', 'API_URL'];\nfunction Game($resource, API_URL) {\n  return new $resource(`${API_URL}/games/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('GamesIndexController', GamesIndexController)\n  .controller('GamesShowController', GamesShowController)\n  .controller('GamesNewController', GamesNewController)\n  .controller('GamesEditController', GamesEditController);\n\n\nGamesIndexController.$inject = ['Game'];\nfunction GamesIndexController(Game) {\n  const gamesIndex = this;\n\n  gamesIndex.all = Game.query();\n}\n\nGamesShowController.$inject = ['Game', '$state'];\nfunction GamesShowController(Game, $state) {\n  const gamesShow = this;\n\n  function deleteGame() {\n    gamesShow.game.$remove(() => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  gamesShow.delete = deleteGame;\n\n  gamesShow.game = Game.get($state.params);\n}\n\nGamesNewController.$inject = ['Game', '$state', 'Venue'];\nfunction GamesNewController(Game, $state, Venue) {\n  const gamesNew = this;\n\n  gamesNew.game = {};\n\n  function create() {\n    Game.save(gamesNew.game, () => {\n      $state.go('gamesIndex');\n    });\n  }\n  gamesNew.create = create;\n  gamesNew.venues = Venue.query();\n}\n\nGamesEditController.$inject = ['Game', '$state'];\nfunction GamesEditController(Game, $state) {\n  const gamesEdit = this;\n\n  gamesEdit.game = Game.get($state.params);\n\n  function update() {\n    gamesEdit.game.$update(() => {\n      $state.go('gamesShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      venues: '='\n    },\n    link: function($scope, element) {\n\n      const map = new $window.google.maps.Map(element[0], {\n        center: {\n          lat: 51.508530,\n          lng: -0.076132\n        },\n        zoom: 11\n      });\n      let markers = [];\n      function clearMarkers() {\n        markers.forEach((marker) => {\n          marker.setMap(null);\n        });\n        markers = [];\n      }\n\n      $scope.$watch('venues.$resolved', () => {\n        clearMarkers();\n        if($scope.venues.$resolved) {\n          $scope.venues.forEach((venue) => {\n            if(venue.lat && venue.lng) {\n              const marker = new $window.google.maps.Marker({\n                position: { lat: venue.lat, lng: venue.lng },\n                map: map,\n                animation: $window.google.maps.Animation.DROP\n              });\n              marker.addListener('click', () => {\n                // infoWindow.open(map, marker);\n                markers.push(marker);\n              });\n            }\n          });\n        }\n      });\n\n      // const contentString = '<h1>' </h1>;\n      // const infoWindow = new $window.google.maps.InfoWindow({\n      //   content: contentString\n      // });\n    }\n  };\n}\n","angular.module('finalProject')\n  .directive('googleplace', googleplace);\n  // .directive('googleMap', googleMap);\n\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      venue: '='\n      // user: '='\n    },\n    link: function($scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: { country: 'GB' }\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latLng = place.geometry.location.toJSON();\n\n        $scope.venue.lat = latLng.lat;\n        $scope.venue.lng = latLng.lng;\n        $scope.venue.postcode = place.formatted_address;\n        // $scope.user.lat = latLng.lat;\n        // $scope.user.lat = latLng.lng;\n        //\n        // console.log($scope.user.lat);\n\n        console.log(place);\n        console.log(place.formatted_address);\n\n\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  const protectedStates = ['usersEdit', 'usersNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('home', {\n      url: '/home',\n      templateUrl: '/templates/home.html'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('gamesIndex', {\n      url: '/games',\n      templateUrl: '/templates/gamesIndex.html',\n      controller: 'GamesIndexController as gamesIndex'\n    })\n    .state('gamesNew', {\n      url: '/games/new',\n      templateUrl: '/templates/gamesNew.html',\n      controller: 'GamesNewController as gamesNew'\n    })\n    .state('gamesShow', {\n      url: '/games/:id',\n      templateUrl: '/templates/gamesShow.html',\n      controller: 'GamesShowController as gamesShow'\n    })\n    .state('gamesEdit', {\n      url: '/games/:id/edit',\n      templateUrl: '/templates/gamesEdit.html',\n      controller: 'GamesEditController as gamesEdit'\n    })\n    .state('venuesIndex', {\n      url: '/venues',\n      templateUrl: '/templates/venuesIndex.html',\n      controller: 'VenuesIndexController as venuesIndex'\n    })\n    .state('venuesNew', {\n      url: '/venues/new',\n      templateUrl: '/templates/venuesNew.html',\n      controller: 'VenuesNewController as venuesNew'\n    })\n    .state('venuesShow', {\n      url: '/venues/:id',\n      templateUrl: '/templates/venuesShow.html',\n      controller: 'VenuesShowController as venuesShow'\n    })\n    .state('venuesEdit', {\n      url: '/venues/:id/edit',\n      templateUrl: '/templates/venuesEdit.html',\n      controller: 'VenuesEditController as venuesEdit'\n    });\n\n  $urlRouterProvider.otherwise('/home');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state'];\nfunction UsersShowController(User, $state) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  // usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n","angular.module('finalProject')\n  .factory('Venue', Venue);\n\nVenue.$inject = ['$resource', 'API_URL'];\nfunction Venue($resource, API_URL) {\n  return new $resource(`${API_URL}/venues/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('VenuesIndexController', VenuesIndexController)\n  .controller('VenuesShowController', VenuesShowController)\n  .controller('VenuesNewController', VenuesNewController)\n  .controller('VenuesEditController', VenuesEditController);\n\n\nVenuesIndexController.$inject = ['Venue'];\nfunction VenuesIndexController(Venue) {\n  const venuesIndex = this;\n\n  venuesIndex.all = Venue.query();\n}\n\nVenuesShowController.$inject = ['Venue', '$state'];\nfunction VenuesShowController(Venue, $state) {\n  const venuesShow = this;\n\n  function deleteVenue() {\n    venuesShow.venue.$remove(() => {\n      $state.go('venuesIndex');\n    });\n  }\n\n  venuesShow.delete = deleteVenue;\n\n  venuesShow.venue = Venue.get({ id: $state.params.id });\n}\n\nVenuesNewController.$inject = ['Venue', '$state'];\nfunction VenuesNewController(Venue, $state) {\n  const venuesNew = this;\n\n  venuesNew.game = {};\n\n  function create() {\n    Venue.save(venuesNew.venue, () => {\n      $state.go('venuesIndex');\n    });\n  }\n  venuesNew.create = create;\n}\n\nVenuesEditController.$inject = ['Venue', '$state'];\nfunction VenuesEditController(Venue, $state) {\n  const venuesEdit = this;\n\n  venuesEdit.venue = Venue.get($state.params);\n\n  function update() {\n    venuesEdit.venue.$update(() => {\n      $state.go('venuesShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n"]}