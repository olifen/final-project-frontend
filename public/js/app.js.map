{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/game.js","js/controllers/games.js","js/directives/googleMap.js","js/directives/googlePlace.js","js/controllers/main.js","js/models/membership.js","js/router.js","js/models/user.js","js/controllers/users.js","js/models/venue.js","js/controllers/venues.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Game","$resource","id","update","method","GamesIndexController","gamesIndex","all","query","GamesShowController","Membership","$window","deleteGame","gamesShow","game","$remove","leaveGame","membership","delete","index","memberships","indexOf","splice","numberOfPlayers","$resolved","length","numberOfPlaces","no_of_places","canJoinGame","alreadyInGame","findIndex","currentLoggedInUser","isCurrentUserOrganiser","userIsOrganiser","getPayload","addMembership","game_id","params","save","data","console","log","location","reload","get","GamesNewController","Venue","create","gamesNew","venues","GamesEditController","gamesEdit","$update","googleMap","restrict","replace","template","scope","center","link","$scope","element","clearMarkers","markers","forEach","marker","setMap","map","google","maps","Map","lat","lng","zoom","setCenter","Marker","position","$watch","venue","animation","Animation","DROP","addListener","push","googleplace","require","attrs","model","options","types","componentRestrictions","country","autocomplete","places","Autocomplete","place","getPlace","latLng","geometry","toJSON","postcode","formatted_address","$setViewValue","val","MainController","$rootScope","User","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","currentUser","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","VenuesIndexController","venuesIndex","VenuesShowController","deleteVenue","venuesShow","VenuesNewController","venuesNew","VenuesEditController","venuesEdit","angular","module","constant","window","hostname","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', window.location.hostname === 'localhost' ? 'http://localhost:3000' : '//kickabout-api.herokuapp.com')\n\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('venuesIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Game', Game);\n\nGame.$inject = ['$resource', 'API_URL'];\nfunction Game($resource, API_URL) {\n  return new $resource(`${API_URL}/games/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('GamesIndexController', GamesIndexController)\n  .controller('GamesShowController', GamesShowController)\n  .controller('GamesNewController', GamesNewController)\n  .controller('GamesEditController', GamesEditController);\n\n\nGamesIndexController.$inject = ['Game'];\nfunction GamesIndexController(Game) {\n  const gamesIndex = this;\n\n  gamesIndex.all = Game.query();\n}\n\nGamesShowController.$inject = ['Game', '$state', 'Membership', '$window', '$auth'];\nfunction GamesShowController(Game, $state, Membership, $window, $auth) {\n  const gamesShow = this;\n  function deleteGame() {\n    gamesShow.game.$remove(() => {\n      $state.go('gamesIndex');\n    });\n  }\n  gamesShow.currentLoggedInUser = $auth.getPayload();\n  gamesShow.delete = deleteGame;\n  gamesShow.leaveGame = leaveGame;\n\n  gamesShow.game = Game.get($state.params);\n\n  function leaveGame(membership) {\n    Membership.delete(membership, ()=> {\n      const index = gamesShow.game.memberships.indexOf(membership);\n      gamesShow.game.memberships.splice(index, 1);\n      //do whatever\n    });\n  }\n\n  function numberOfPlayers() {\n    return gamesShow.game.$resolved ? gamesShow.game.memberships.length : 0;\n  }\n\n  function numberOfPlaces() {\n    return gamesShow.game.$resolved ? gamesShow.game.no_of_places : 0;\n  }\n\n  // check if this game can be joined based on number of available places\n  gamesShow.canJoinGame = canJoinGame;\n  function canJoinGame() {\n    return (numberOfPlayers() < numberOfPlaces());\n  }\n\n  function alreadyInGame() {\n    return gamesShow.game.memberships.findIndex((membership) => {\n      return membership.user.id === gamesShow.currentLoggedInUser.id;\n    }) > -1;\n  }\n  gamesShow.alreadyInGame = alreadyInGame;\n\n\n  function isCurrentUserOrganiser() {\n    let userIsOrganiser = false;\n\n    if (gamesShow.game.$resolved) {\n      userIsOrganiser = gamesShow.game.user.id === $auth.getPayload().id;\n    }\n\n    return userIsOrganiser;\n  }\n  gamesShow.isCurrentUserOrganiser = isCurrentUserOrganiser;\n\n\n  gamesShow.addMembership = addMembership;\n  function addMembership(){\n    const membership = {\n      game_id: $state.params.id\n    };\n    Membership.save(membership, (data) => {\n      console.log(data);\n      $window.location.reload();\n    });\n  }\n}\n\nGamesNewController.$inject = ['Game', '$state', 'Venue'];\nfunction GamesNewController(Game, $state, Venue) {\n  const gamesNew = this;\n\n  gamesNew.game = {};\n\n  function create() {\n    Game.save(gamesNew.game, () => {\n      $state.go('gamesIndex');\n    });\n  }\n  gamesNew.create = create;\n  gamesNew.venues = Venue.query();\n}\n\nGamesEditController.$inject = ['Game', '$state'];\nfunction GamesEditController(Game, $state) {\n  const gamesEdit = this;\n\n  gamesEdit.game = Game.get($state.params);\n\n  function update() {\n    gamesEdit.game.$update(() => {\n      $state.go('gamesShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window', '$state'];\nfunction googleMap($window, $state) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      venues: '=',\n      center: '='\n    },\n    link: function($scope, element) {\n\n      const map = new $window.google.maps.Map(element[0], {\n        center: {\n          lat: 51.4428,\n          lng: -0.1526\n        },\n        zoom: 11\n      });\n\n      if($scope.center && $scope.center.lat && $scope.center.lng) {\n        const center = { lat: $scope.center.lat, lng: $scope.center.lng };\n        map.setCenter(center);\n\n        new $window.google.maps.Marker({\n          position: center,\n          map: map\n        });\n      }\n\n      let markers = [];\n      function clearMarkers() {\n        markers.forEach((marker) => {\n          marker.setMap(null);\n        });\n        markers = [];\n      }\n\n      $scope.$watch('venues.$resolved', () => {\n        clearMarkers();\n        if($scope.venues && $scope.venues.$resolved) {\n          $scope.venues.forEach((venue) => {\n            if(venue.lat && venue.lng) {\n              const marker = new $window.google.maps.Marker({\n                position: { lat: venue.lat, lng: venue.lng },\n                map: map,\n                animation: $window.google.maps.Animation.DROP,\n                venue: venue\n              });\n\n              marker.addListener('click', () => {\n                $state.go('venuesShow', { id: venue.id });\n              });\n\n              markers.push(marker);\n            }\n          });\n        }\n      });\n\n      // const contentString = '<h1>' </h1>;\n      // const infoWindow = new $window.google.maps.InfoWindow({\n      //   content: contentString\n      // });\n    }\n  };\n}\n","angular.module('finalProject')\n  .directive('googleplace', googleplace);\n  // .directive('googleMap', googleMap);\n\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      venue: '=',\n      user: '='\n    },\n    link: function($scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: { country: 'GB' }\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latLng = place.geometry.location.toJSON();\n\n        if($scope.venue) {\n          $scope.venue.lat = latLng.lat;\n          $scope.venue.lng = latLng.lng;\n          $scope.venue.postcode = place.formatted_address;\n        }\n\n        if($scope.user) {\n          $scope.user.lat = latLng.lat;\n          $scope.user.lng = latLng.lng;\n        }\n\n        //\n        // console.log($scope.user.lat);\n        console.log('scope:', $scope.user);\n        // console.log(place);\n        // console.log(place.formatted_address);\n\n\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'User'];\nfunction MainController($auth, $state, $rootScope, User) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  main.currentUser = User.get({id: $auth.getPayload().id});\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  const protectedStates = ['usersEdit', 'usersNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Membership', Membership);\n\nMembership.$inject = ['$resource', 'API_URL'];\nfunction Membership($resource, API_URL) {\n  return new $resource(`${API_URL}/memberships/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('home', {\n      url: '/home',\n      templateUrl: '/templates/home.html'\n    })\n    // .state('usersIndex', {\n    //   url: '/users',\n    //   templateUrl: '/templates/usersIndex.html',\n    //   controller: 'UsersIndexController as usersIndex'\n    // })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('gamesIndex', {\n      url: '/games',\n      templateUrl: '/templates/gamesIndex.html',\n      controller: 'GamesIndexController as gamesIndex'\n    })\n    .state('gamesNew', {\n      url: '/games/new',\n      templateUrl: '/templates/gamesNew.html',\n      controller: 'GamesNewController as gamesNew'\n    })\n    .state('gamesShow', {\n      url: '/games/:id',\n      templateUrl: '/templates/gamesShow.html',\n      controller: 'GamesShowController as gamesShow'\n    })\n    .state('gamesEdit', {\n      url: '/games/:id/edit',\n      templateUrl: '/templates/gamesEdit.html',\n      controller: 'GamesEditController as gamesEdit'\n    })\n    .state('venuesIndex', {\n      url: '/venues',\n      templateUrl: '/templates/venuesIndex.html',\n      controller: 'VenuesIndexController as venuesIndex'\n    })\n    .state('venuesNew', {\n      url: '/venues/new',\n      templateUrl: '/templates/venuesNew.html',\n      controller: 'VenuesNewController as venuesNew'\n    })\n    .state('venuesShow', {\n      url: '/venues/:id',\n      templateUrl: '/templates/venuesShow.html',\n      controller: 'VenuesShowController as venuesShow'\n    })\n    .state('venuesEdit', {\n      url: '/venues/:id/edit',\n      templateUrl: '/templates/venuesEdit.html',\n      controller: 'VenuesEditController as venuesEdit'\n    });\n\n  $urlRouterProvider.otherwise('home');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n  // usersShow.user = User.get({id: $auth.getPayload().id});\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  // usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n","angular.module('finalProject')\n  .factory('Venue', Venue);\n\nVenue.$inject = ['$resource', 'API_URL'];\nfunction Venue($resource, API_URL) {\n  return new $resource(`${API_URL}/venues/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('VenuesIndexController', VenuesIndexController)\n  .controller('VenuesShowController', VenuesShowController)\n  .controller('VenuesNewController', VenuesNewController)\n  .controller('VenuesEditController', VenuesEditController);\n\n\nVenuesIndexController.$inject = ['Venue'];\nfunction VenuesIndexController(Venue) {\n  const venuesIndex = this;\n\n  venuesIndex.all = Venue.query();\n}\n\nVenuesShowController.$inject = ['Venue', '$state'];\nfunction VenuesShowController(Venue, $state) {\n  const venuesShow = this;\n\n  function deleteVenue() {\n    venuesShow.venue.$remove(() => {\n      $state.go('venuesIndex');\n    });\n  }\n\n  venuesShow.delete = deleteVenue;\n\n  venuesShow.venue = Venue.get({ id: $state.params.id });\n}\n\nVenuesNewController.$inject = ['Venue', '$state'];\nfunction VenuesNewController(Venue, $state) {\n  const venuesNew = this;\n\n  venuesNew.game = {};\n\n  function create() {\n    Venue.save(venuesNew.venue, () => {\n      $state.go('venuesIndex');\n    });\n  }\n  venuesNew.create = create;\n}\n\nVenuesEditController.$inject = ['Venue', '$state'];\nfunction VenuesEditController(Venue, $state) {\n  const venuesEdit = this;\n\n  venuesEdit.venue = Venue.get($state.params);\n\n  function update() {\n    venuesEdit.venue.$update(() => {\n      $state.go('venuesShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n"]}